diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
index f18f6a56..60017a6e 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
@@ -23,23 +23,17 @@ import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.IOException;
-import java.security.MessageDigest;
 import java.util.Calendar;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.TimeZone;
 
 import org.apache.commons.compress.AbstractTestCase;
-import org.apache.commons.compress.archivers.ArchiveEntry;
 import org.apache.commons.compress.archivers.ArchiveOutputStream;
 import org.apache.commons.compress.archivers.ArchiveStreamFactory;
 import org.apache.commons.compress.utils.CharsetNames;
 import org.apache.commons.compress.utils.IOUtils;
 
-import org.junit.Assert;

 public class TarArchiveOutputStreamTest extends AbstractTestCase {
 
     public void testCount() throws Exception {
@@ -597,57 +591,4 @@ public class TarArchiveOutputStreamTest extends AbstractTestCase {
         assertEquals(TarConstants.DEFAULT_BLKSIZE, f.length());
     }

-    public void testLongNameMd5Hash() throws Exception {
-        final String longFileName = "a/considerably/longer/file/name/which/forces/use/of/the/long/link/header/which/appears/to/always/use/the/current/time/as/modification/date";
-        String fname = longFileName;
-        final Date modificationDate = new Date();

-        byte[] archive1 = createTarArchiveContainingOneDirectory(fname, modificationDate);
-        byte[] digest1 = MessageDigest.getInstance("MD5").digest(archive1);

-        Thread.sleep(1000L);

-        byte[] archive2 = createTarArchiveContainingOneDirectory(fname, modificationDate);
-        byte[] digest2 = MessageDigest.getInstance("MD5").digest(archive2);
-        Assert.assertArrayEquals(digest1, digest2);

-        Thread.sleep(1000);
-        TarArchiveInputStream tarIn = new TarArchiveInputStream(new ByteArrayInputStream(archive2));
-        ArchiveEntry nextEntry = tarIn.getNextEntry();
-        assertEquals(longFileName, nextEntry.getName());

-        assertEquals(modificationDate.getTime() / 1000, nextEntry.getLastModifiedDate().getTime() / 1000);
-        tarIn.close();
-    }

-    private static byte[] createTarArchiveContainingOneDirectory(String fname, Date modificationDate) throws IOException {
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        TarArchiveOutputStream tarOut = new TarArchiveOutputStream(baos, 1024);
-        tarOut.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
-        TarArchiveEntry tarEntry = new TarArchiveEntry("d");
-        tarEntry.setModTime(modificationDate);
-        tarEntry.setMode(TarArchiveEntry.DEFAULT_DIR_MODE);
-        tarEntry.setModTime(modificationDate.getTime());
-        tarEntry.setName(fname);
-        tarOut.putArchiveEntry(tarEntry);
-        tarOut.closeArchiveEntry();
-        tarOut.close();
-        return baos.toByteArray();
-    }

 }
