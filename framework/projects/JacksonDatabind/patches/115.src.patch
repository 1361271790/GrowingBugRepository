diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java
index e4f239b53..c59c8053d 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java
@@ -6,7 +6,6 @@ import java.util.UUID;
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.util.TokenBuffer;
 
 /**
  * Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.
@@ -42,15 +41,13 @@ public class UUIDSerializer
     {
         // First: perhaps we could serialize it as raw binary data?
         if (jgen.canWriteBinaryNatively()) {
             /* 07-Dec-2013, tatu: One nasty case; that of TokenBuffer. While it can
              *   technically retain binary data, we do not want to do use binary
              *   with it, as that results in UUIDs getting converted to Base64 for
              *   most conversions.
              */
-            if (!(jgen instanceof TokenBuffer)) {
                 jgen.writeBinary(_asBytes(value));
                 return;
-            }
         }
         
         // UUID.toString() works ok functionally, but we can make it go much faster
