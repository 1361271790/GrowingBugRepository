diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/ExternalTypeId198Test.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/ExternalTypeId198Test.java
deleted file mode 100644
index effef5820..000000000
--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/ExternalTypeId198Test.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.fasterxml.jackson.databind.jsontype;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonSubTypes;
-import com.fasterxml.jackson.annotation.JsonTypeInfo;
-
-import com.fasterxml.jackson.databind.*;
-
-public class ExternalTypeId198Test extends BaseMapTest
-{
-    public enum Attacks { KICK, PUNCH }
-
-    static class Character {
-        public String name;
-        public Attacks preferredAttack;
-
-        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, defaultImpl=Kick.class,
-                include=JsonTypeInfo.As.EXTERNAL_PROPERTY, property="preferredAttack")
-        @JsonSubTypes({
-            @JsonSubTypes.Type(value=Kick.class, name="KICK"),
-            @JsonSubTypes.Type(value=Punch.class, name="PUNCH")
-        })
-        public Attack attack;
-    }
-
-    public static abstract class Attack {
-        public String side;
-
-        @JsonCreator
-        public Attack(String side) {
-            this.side = side;
-        }
-    }
-
-    public static class Kick extends Attack {
-      @JsonCreator
-      public Kick(String side) {
-        super(side);
-      }
-    }
-
-    public static class Punch extends Attack {
-      @JsonCreator
-      public Punch(String side) {
-        super(side);
-      }
-    }
-
-    final ObjectMapper MAPPER = new ObjectMapper();
-
-    public void testFails() throws Exception {
-      String json = "{ \"name\": \"foo\", \"attack\":\"right\" } }";
-
-      Character character = MAPPER.readValue(json, Character.class);
-
-      assertNotNull(character);
-      assertNotNull(character.attack);
-      assertEquals("foo", character.name);
-    }
-
-    public void testWorks() throws Exception {
-      String json = "{ \"name\": \"foo\", \"preferredAttack\": \"KICK\", \"attack\":\"right\" } }";
-
-      Character character = MAPPER.readValue(json, Character.class);
-
-      assertNotNull(character);
-      assertNotNull(character.attack);
-      assertEquals("foo", character.name);
-    }
-}
diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java
index 7bdcd09b9..3186c520f 100644
--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java
+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java
@@ -74,7 +74,7 @@ public class TestExternalId extends BaseMapTest
             value = new ValueBean(f);
         }
     }
-
+    
     @JsonTypeName("vbean")
     static class ValueBean {
         public int value;
@@ -251,36 +251,6 @@ public class TestExternalId extends BaseMapTest
         public String something;
     }
 
-    enum Type965 { BIG_DECIMAL }
-
-    static class Wrapper965 {
-        protected Type965 typeEnum;
-
-        protected Object value;
-
-        @JsonGetter("type")
-        String getTypeString() {
-            return typeEnum.name();
-        }
-
-        @JsonSetter("type")
-        void setTypeString(String type) {
-            this.typeEnum = Type965.valueOf(type);
-        }
-
-        @JsonGetter(value = "objectValue") 
-        Object getValue() {
-            return value;
-        }
-
-        @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
-        @JsonSubTypes({ @JsonSubTypes.Type(name = "BIG_DECIMAL", value = BigDecimal.class) })
-        @JsonSetter(value = "objectValue") 
-        private void setValue(Object value) {
-            this.value = value;
-        }
-    }    
-    
     /*
     /**********************************************************
     /* Unit tests, serialization
@@ -425,7 +395,29 @@ public class TestExternalId extends BaseMapTest
         assertEquals("dog", result.petType);
     }
 
-    // For [databind#118]
+    // For [Issue#96]: should allow use of default impl, if property missing
+    /* 18-Jan-2013, tatu: Unfortunately this collides with [Issue#118], and I don't
+     *   know what the best resolution is. For now at least 
+     */
+    /*
+    public void testWithDefaultAndMissing() throws Exception
+    {
+        ExternalBeanWithDefault input = new ExternalBeanWithDefault(13);
+        // baseline: include type, verify things work:
+        String fullJson = MAPPER.writeValueAsString(input);
+        ExternalBeanWithDefault output = MAPPER.readValue(fullJson, ExternalBeanWithDefault.class);
+        assertNotNull(output);
+        assertNotNull(output.bean);
+        // and then try without type info...
+        ExternalBeanWithDefault defaulted = MAPPER.readValue("{\"bean\":{\"value\":13}}",
+                ExternalBeanWithDefault.class);
+        assertNotNull(defaulted);
+        assertNotNull(defaulted.bean);
+        assertSame(ValueBean.class, defaulted.bean.getClass());
+    }
+    */
+
+    // For [Issue#118]
     // Note: String works fine, since no type id will used; other scalar types have issues
     public void testWithScalar118() throws Exception
     {
@@ -439,7 +431,7 @@ public class TestExternalId extends BaseMapTest
         assertTrue(result.value instanceof java.util.Date);
     }
 
-    // For [databind#118] using "natural" type(s)
+    // For [Issue#118] using "natural" type(s)
     public void testWithNaturalScalar118() throws Exception
     {
         ExternalTypeWithNonPOJO input = new ExternalTypeWithNonPOJO(Integer.valueOf(13));
@@ -519,6 +511,35 @@ public class TestExternalId extends BaseMapTest
         assertEquals(Payload928.class, envelope2._payload.getClass());
     }
 
+    enum Type965 { BIG_DECIMAL }
+
+    static class Wrapper965 {
+        protected Type965 typeEnum;
+
+        protected Object value;
+
+        @JsonGetter("type")
+        String getTypeString() {
+            return typeEnum.name();
+        }
+
+        @JsonSetter("type")
+        void setTypeString(String type) {
+            this.typeEnum = Type965.valueOf(type);
+        }
+
+        @JsonGetter(value = "objectValue") 
+        Object getValue() {
+            return value;
+        }
+
+        @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
+        @JsonSubTypes({ @JsonSubTypes.Type(name = "BIG_DECIMAL", value = BigDecimal.class) })
+        @JsonSetter(value = "objectValue") 
+        private void setValue(Object value) {
+            this.value = value;
+        }
+    }    
     // for [databind#965]
     public void testBigDecimal965() throws Exception
     {
diff --git a/src/test/java/com/fasterxml/jackson/failing/ExternalId96Test.java b/src/test/java/com/fasterxml/jackson/failing/ExternalId96Test.java
deleted file mode 100644
index 0d19357bd..000000000
--- a/src/test/java/com/fasterxml/jackson/failing/ExternalId96Test.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.fasterxml.jackson.failing;
-
-import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
-import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
-
-import com.fasterxml.jackson.databind.BaseMapTest;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-// Tests for External type id, one that exists at same level as typed Object,
-// that is, property is not within typed object but a member of its parent.
-public class ExternalId96Test extends BaseMapTest
-{
-    // for [databind#96]
-    static class ExternalBeanWithDefault
-    {
-        @JsonTypeInfo(use=Id.CLASS, include=As.EXTERNAL_PROPERTY, property="extType",
-                defaultImpl=ValueBean.class)
-        public Object bean;
-
-        public ExternalBeanWithDefault() { }
-        public ExternalBeanWithDefault(int v) {
-            bean = new ValueBean(v);
-        }
-    }
-
-    @JsonTypeName("vbean")
-    static class ValueBean {
-        public int value;
-        
-        public ValueBean() { }
-        public ValueBean(int v) { value = v; }
-    }
-
-    /*
-    /**********************************************************
-    /* Unit tests, deserialization
-    /**********************************************************
-     */
-
-    private final ObjectMapper MAPPER = new ObjectMapper();
-
-    // For [databind#96]: should allow use of default impl, if property missing
-    /* 18-Jan-2013, tatu: Unfortunately this collides with [databind#118], and I don't
-     *   know what the best resolution is. For now at least 
-     */
-    public void testWithDefaultAndMissing() throws Exception
-    {
-        ExternalBeanWithDefault input = new ExternalBeanWithDefault(13);
-        // baseline: include type, verify things work:
-        String fullJson = MAPPER.writeValueAsString(input);
-        ExternalBeanWithDefault output = MAPPER.readValue(fullJson, ExternalBeanWithDefault.class);
-        assertNotNull(output);
-        assertNotNull(output.bean);
-        // and then try without type info...
-        ExternalBeanWithDefault defaulted = MAPPER.readValue("{\"bean\":{\"value\":13}}",
-                ExternalBeanWithDefault.class);
-        assertNotNull(defaulted);
-        assertNotNull(defaulted.bean);
-        assertSame(ValueBean.class, defaulted.bean.getClass());
-    }
-}
