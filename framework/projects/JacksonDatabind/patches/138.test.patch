diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java b/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
index 091a8e782..f1a071d8e 100644
--- a/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
+++ b/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java
@@ -12,7 +12,6 @@ import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 import com.fasterxml.jackson.databind.exc.InvalidFormatException;
-import com.fasterxml.jackson.databind.exc.MismatchedInputException;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 
 @SuppressWarnings("serial")
@@ -216,7 +215,7 @@ public class EnumDeserializationTest
         try {
             /*Object result =*/ MAPPER.readValue("\"NO-SUCH-VALUE\"", TestEnum.class);
             fail("Expected an exception for bogus enum value...");
-        } catch (MismatchedInputException jex) {
+        } catch (JsonMappingException jex) {
             verifyException(jex, "value not one of declared");
         }
         jp.close();
@@ -274,7 +273,7 @@ public class EnumDeserializationTest
         try {
             value = r.readValue("1");
             fail("Expected an error");
-        } catch (MismatchedInputException e) {
+        } catch (JsonMappingException e) {
             verifyException(e, "Cannot deserialize");
             verifyException(e, "not allowed to deserialize Enum value out of number: disable");
         }
@@ -283,7 +282,7 @@ public class EnumDeserializationTest
         try {
             value = r.readValue(quote("1"));
             fail("Expected an error");
-        } catch (MismatchedInputException e) {
+        } catch (JsonMappingException e) {
             verifyException(e, "Cannot deserialize");
             // 26-Jan-2017, tatu: as per [databind#1505], should fail bit differently
             verifyException(e, "value not one of declared Enum");
@@ -393,20 +392,20 @@ public class EnumDeserializationTest
 
     // [databind#381]
     public void testUnwrappedEnum() throws Exception {
-        final ObjectMapper mapper = newObjectMapper();
+        final ObjectMapper mapper = new ObjectMapper();
         mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
         
         assertEquals(TestEnum.JACKSON, mapper.readValue("[" + quote("JACKSON") + "]", TestEnum.class));
     }
     
     public void testUnwrappedEnumException() throws Exception {
-        final ObjectMapper mapper = newObjectMapper();
+        final ObjectMapper mapper = new ObjectMapper();
         mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
         try {
             Object v = mapper.readValue("[" + quote("JACKSON") + "]",
                     TestEnum.class);
             fail("Exception was not thrown on deserializing a single array element of type enum; instead got: "+v);
-        } catch (MismatchedInputException exp) {
+        } catch (JsonMappingException exp) {
             //exception as thrown correctly
             verifyException(exp, "Cannot deserialize");
         }
@@ -422,18 +421,6 @@ public class EnumDeserializationTest
         // but also with quoted Strings
         en = MAPPER.readValue(quote("1"), TestEnum.class);
         assertSame(TestEnum.values()[1], en);
-
-        // [databind#1690]: unless prevented
-        final ObjectMapper mapper = newObjectMapper();
-        mapper.disable(MapperFeature.ALLOW_COERCION_OF_SCALARS);
-        try {
-            en = mapper.readValue(quote("1"), TestEnum.class);
-            fail("Should not pass");
-        } catch (MismatchedInputException e) {
-            verifyException(e, "Cannot deserialize value of type");
-            verifyException(e, "EnumDeserializationTest$TestEnum");
-            verifyException(e, "value looks like quoted Enum index");
-        }
     }
 
     public void testEnumWithJsonPropertyRename() throws Exception
@@ -518,14 +505,14 @@ public class EnumDeserializationTest
         assertNull("When using a constructor, the default value annotation shouldn't be used.", myEnum);
     }
 
-    public void testExceptionFromCustomEnumKeyDeserializer() throws Exception {
+    public void testExceptionFromCustomEnumKeyDeserializer() {
         ObjectMapper mapper = newObjectMapper()
                 .registerModule(new EnumModule());
         try {
             mapper.readValue("{\"TWO\": \"dumpling\"}",
                     new TypeReference<Map<AnEnum, String>>() {});
             fail("No exception");
-        } catch (MismatchedInputException e) {
+        } catch (IOException e) {
             assertTrue(e.getMessage().contains("Undefined AnEnum"));
         }
     }
