diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 5ca7d2e83..2d22e2a33 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -714,13 +714,12 @@ public class BeanDeserializer
             return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);
         }
         if (_delegateDeserializer != null) {
             /* 24-Nov-2015, tatu: Use of delegating creator needs to have precedence, and basically
              *   external type id handling just has to be ignored, as they would relate to target
              *   type and not delegate type. Whether this works as expected is another story, but
              *   there's no other way to really mix these conflicting features.
              */
-            return _valueInstantiator.createUsingDelegate(ctxt,
-                    _delegateDeserializer.deserialize(p, ctxt));
+            return deserializeUsingDelegateWithExternalTypeId(p, ctxt);
         }
 
         return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));
@@ -861,4 +855,10 @@ public class BeanDeserializer
             return null; // never gets here
         }
     }
+    protected Object deserializeUsingDelegateWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
+        throws IOException
+    {
+        throw ctxt.instantiationException(handledType(),
+                "Combination of External Type Id, Delegating Creator not yet supported");
+    }
 }
