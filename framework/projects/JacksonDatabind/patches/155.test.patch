diff --git a/src/test/java/com/fasterxml/jackson/databind/format/UUIDFormatTest.java b/src/test/java/com/fasterxml/jackson/databind/format/UUIDFormatTest.java
deleted file mode 100644
index 4fd2f8690..000000000
--- a/src/test/java/com/fasterxml/jackson/databind/format/UUIDFormatTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.fasterxml.jackson.databind.format;
-
-import java.util.UUID;
-
-import com.fasterxml.jackson.annotation.JsonFormat;
-
-import com.fasterxml.jackson.databind.BaseMapTest;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-public class UUIDFormatTest extends BaseMapTest
-{
-    protected static class UUIDWrapper {
-        @JsonFormat(shape=JsonFormat.Shape.NATURAL)
-        public UUID u;
-
-        public UUIDWrapper() { }
-        public UUIDWrapper(UUID value) { u = value; }
-    }
-
-    protected static class UUIDAsString {
-        @JsonFormat(shape=JsonFormat.Shape.STRING)
-        public UUID u;
-
-        public UUIDAsString() { }
-        public UUIDAsString(UUID value) { u = value; }
-    }
-
-    /*
-    /**********************************************************************
-    /* Test methods
-    /**********************************************************************
-     */
-
-//    private final static ObjectMapper MAPPER = newJsonMapper();
-    private final static ObjectMapper MAPPER = new ObjectMapper();
-
-    public void testShapeViaDefaults() throws Exception
-    {
-/*
-        assertEquals(aposToQuotes("{'b':true}"),
-                MAPPER.writeValueAsString(new BooleanWrapper(true)));
-        ObjectMapper m = newJsonMapper();
-        m.configOverride(Boolean.class)
-            .setFormat(JsonFormat.Value.forShape(JsonFormat.Shape.NUMBER));
-        assertEquals(aposToQuotes("{'b':1}"),
-                m.writeValueAsString(new BooleanWrapper(true)));
-*/
-    }
-
-    /*
-    public void testShapeOnProperty() throws Exception
-    {
-        assertEquals(aposToQuotes("{'b1':1,'b2':0,'b3':true}"),
-                MAPPER.writeValueAsString(new BeanWithBoolean(true, false, true)));
-    }
-    */
-    
-}
diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultTypeResolver2472Test.java b/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultTypeResolver2472Test.java
deleted file mode 100644
index 1cabea19a..000000000
--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/DefaultTypeResolver2472Test.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.fasterxml.jackson.databind.jsontype.deftyping;
-
-import java.util.Arrays;
-
-import com.fasterxml.jackson.annotation.JsonTypeInfo;
-
-import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder;
-import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
-import com.fasterxml.jackson.databind.json.JsonMapper;
-import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
-
-// [databind#2472]
-public class DefaultTypeResolver2472Test extends BaseMapTest
-{
-    public void testLegacyCtor2472() throws Exception
-    {
-        @SuppressWarnings({ "deprecation", "serial" })
-        TypeResolverBuilder<?> legacyTyper = new DefaultTypeResolverBuilder(DefaultTyping.NON_FINAL) { };
-        legacyTyper.init(JsonTypeInfo.Id.CLASS, null);
-        legacyTyper.inclusion(JsonTypeInfo.As.PROPERTY);
-
-        final ObjectMapper mapper = JsonMapper.builder().build();
-        mapper.setDefaultTyping(legacyTyper);
-
-        String json = mapper.writeValueAsString(Arrays.asList("foo"));
-        assertNotNull(json);
-
-        Object ob = mapper.readValue(json, Object.class);
-        assertNotNull(ob);
-    }
-}
