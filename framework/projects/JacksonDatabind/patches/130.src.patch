diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
index 138f7930f..c82edf5e3 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
@@ -33,41 +40,34 @@ public class PropertyBuilder
      */
     protected Object _defaultBean;
 
     /**
      * Default inclusion mode for properties of the POJO for which
      * properties are collected; possibly overridden on
      * per-property basis. Combines global inclusion defaults and
      * per-type (annotation and type-override) inclusion overrides.
      */
-    final protected JsonInclude.Value _defaultInclusion;
 
     /**
      * Marker flag used to indicate that "real" default values are to be used
      * for properties, as per per-type value inclusion of type <code>NON_DEFAULT</code>
      *
      * @since 2.8
      */
-    final protected boolean _useRealPropertyDefaults;
     
     public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc)
     {
         _config = config;
         _beanDesc = beanDesc;
         // 08-Sep-2016, tatu: This gets tricky, with 3 levels of definitions:
         //  (a) global default inclusion
         //  (b) per-type default inclusion (from annotation or config overrides;
         //     latter having precedence
         //  Cc) per-property override
         //
         //  and not only requiring merging, but also considering special handling
         //  for NON_DEFAULT in case of (b) (vs (a) or (c))
-        JsonInclude.Value inclPerType = JsonInclude.Value.merge(
-                beanDesc.findPropertyInclusion(JsonInclude.Value.empty()),
-                config.getDefaultPropertyInclusion(beanDesc.getBeanClass(),
-                        JsonInclude.Value.empty()));
-        _defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(),
-                inclPerType);
-        _useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT;
+        _defaultInclusion = beanDesc.findPropertyInclusion(
+                config.getDefaultPropertyInclusion(beanDesc.getBeanClass()));
         _annotationIntrospector = _config.getAnnotationIntrospector();
     }
 
@@ -143,8 +123,8 @@ public class PropertyBuilder
             //    so that if enclosing class has this, we may need to access values of property,
             //    whereas for global defaults OR per-property overrides, we have more
             //    static definition. Sigh.
             // First: case of class/type specifying it; try to find POJO property defaults
-            if (_useRealPropertyDefaults) {
+            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {
                 // 07-Sep-2016, tatu: may also need to front-load access forcing now
                 if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {
                     am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
@@ -152,7 +132,6 @@ public class PropertyBuilder
                 valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
             } else {
                 valueToSuppress = getDefaultValue(actualType);
-                suppressNulls = true;
             }
             if (valueToSuppress == null) {
                 suppressNulls = true;

