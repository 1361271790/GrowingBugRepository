diff --git a/src/test/java/org/locationtech/spatial4j/context/jts/JtsSpatialContextTest.java b/src/test/java/org/locationtech/spatial4j/context/jts/JtsSpatialContextTest.java
index 9e84240a..ebd45d21 100644
--- a/src/test/java/org/locationtech/spatial4j/context/jts/JtsSpatialContextTest.java
+++ b/src/test/java/org/locationtech/spatial4j/context/jts/JtsSpatialContextTest.java
@@ -13,7 +13,6 @@ import org.locationtech.jts.geom.GeometryFactory;
 import org.locationtech.spatial4j.shape.jts.JtsGeometry;
 import org.locationtech.jts.geom.GeometryCollection;
 import org.locationtech.jts.geom.Polygon;
-import org.locationtech.jts.geom.MultiPolygon;
 import org.junit.Test;
 import org.locationtech.spatial4j.shape.jts.JtsShapeFactory;
 import org.locationtech.spatial4j.util.Geom;
@@ -63,20 +62,4 @@ public class JtsSpatialContextTest {
                 "((0 0, 1 1, 1 0, 0 0))" +
                 ")", jtsGeometry.toString());
     }
-
-    @Test
-    public void testMultiDatelineWrap() {
-        // polygon crosses the dateline twice
-        Polygon polygon = Geom.build().points(-179, 45, 179, 44, 1, 35, -179, 25, 179, 24, 179, 19, -179, 20, 1, 30, 179, 39, -179, 40).toPolygon();
-
-        JtsSpatialContextFactory factory = new JtsSpatialContextFactory();
-        factory.datelineRule = DatelineRule.width180;
-        JtsSpatialContext ctx = factory.newSpatialContext();
-        JtsShapeFactory shapeFactory = ctx.getShapeFactory();
-        JtsGeometry jtsGeometry = shapeFactory.makeShape(polygon);
-        Geometry geometry = jtsGeometry.getGeom();
-
-        assertTrue(geometry.isValid());
-        assertTrue(geometry instanceof MultiPolygon);
-    }
 }
diff --git a/src/test/java/org/locationtech/spatial4j/shape/jts/JtsShapeFactoryTest.java b/src/test/java/org/locationtech/spatial4j/shape/jts/JtsShapeFactoryTest.java
index 09877d70..7458cd7e 100644
--- a/src/test/java/org/locationtech/spatial4j/shape/jts/JtsShapeFactoryTest.java
+++ b/src/test/java/org/locationtech/spatial4j/shape/jts/JtsShapeFactoryTest.java
@@ -28,13 +28,11 @@ import org.locationtech.spatial4j.context.jts.JtsSpatialContext;
 import org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory;
 import org.locationtech.spatial4j.distance.DistanceUtils;
 import org.locationtech.spatial4j.distance.GeodesicSphereDistCalc;
-import org.locationtech.spatial4j.shape.Circle;
 import org.locationtech.spatial4j.shape.Point;
 import org.locationtech.spatial4j.shape.Shape;
 import org.locationtech.spatial4j.shape.impl.GeoCircle;
 import org.locationtech.spatial4j.shape.impl.PointImpl;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 public class JtsShapeFactoryTest {
@@ -96,35 +94,7 @@ public class JtsShapeFactoryTest {
       Point point = new PointImpl(coordinate.x, coordinate.y, SpatialContext.GEO);
       double distance = distCalc.distance(point, circleCenter);
       double distanceKm = DistanceUtils.degrees2Dist(distance, DistanceUtils.EARTH_MEAN_RADIUS_KM);
-      assertEquals(String.format("Distance from point to center: %.2f km. Expected: %.2f km", distanceKm,
-              radiusKm), radiusKm, distanceKm, maxDeltaKm);
-    }
-  }
-
-  @Test
-  public void testCircleDateLineWrapping() {
-    // left wrapping (-180)
-    circleGeometryConversionDateLineTest(-179.99, 51.22, 5);
-    // right wrapping (+180)
-    circleGeometryConversionDateLineTest(179.99, -35.6, 10);
-  }
-
-  private void circleGeometryConversionDateLineTest(double lon, double lat, double radiusKm) {
-    JtsShapeFactory shapeFactory = JtsSpatialContext.GEO.getShapeFactory();
-    Circle circle = shapeFactory.circle(lon, lat, DistanceUtils.dist2Degrees(radiusKm, DistanceUtils.EARTH_MEAN_RADIUS_KM));
-    Geometry geom = shapeFactory.getGeometryFrom(circle);
-
-    assertTrue(circle.getBoundingBox().getCrossesDateLine());
-    assertEquals("MultiPolygon", geom.getGeometryType());
-
-    GeodesicSphereDistCalc distCalc = new GeodesicSphereDistCalc.Haversine();
-    double maxDeltaKm = radiusKm / 100; // allow 1% inaccuracy
-    for (Coordinate c : geom.getCoordinates()) {
-      // Check distance from center of each point
-      Point point = new PointImpl(c.x, c.y, SpatialContext.GEO);
-      double distance = distCalc.distance(point, lon, lat);
-      double distanceKm = DistanceUtils.degrees2Dist(distance, DistanceUtils.EARTH_MEAN_RADIUS_KM);
-      assertEquals(String.format("Distance from point to center: %.2f km. Expected: %.2f km", distanceKm,
+      Assert.assertEquals(String.format("Distance from point to center: %.2f km. Expected: %.2f km", distanceKm,
               radiusKm), radiusKm, distanceKm, maxDeltaKm);
     }
   }
