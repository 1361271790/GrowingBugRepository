diff --git a/src/main/java/com/alibaba/spring/util/BeanUtils.java b/src/main/java/com/alibaba/spring/util/BeanUtils.java
index ebfa143..4e967ca 100644
--- a/src/main/java/com/alibaba/spring/util/BeanUtils.java
+++ b/src/main/java/com/alibaba/spring/util/BeanUtils.java
@@ -7,17 +7,25 @@ import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.BeanFactoryUtils;
 import org.springframework.beans.factory.ListableBeanFactory;
 import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
+import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.AnnotationAwareOrderComparator;
 import org.springframework.util.ClassUtils;
 import org.springframework.util.ObjectUtils;
+import org.springframework.util.ReflectionUtils;
 import org.springframework.util.StringUtils;
 
+import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static java.lang.String.format;
 import static org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors;
@@ -123,6 +131,24 @@ public abstract class BeanUtils {
             throws NullPointerException {
         return beanFactory.containsBean(beanName) && beanFactory.isTypeMatch(beanName, beanClass);
     }
+    public static String[] getBeanNames(ConfigurableListableBeanFactory beanFactory, Class<?> beanClass) {
+        return getBeanNames(beanFactory, beanClass, false);
+    }
+    public static String[] getBeanNames(ConfigurableListableBeanFactory beanFactory, Class<?> beanClass,
+                                        boolean includingAncestors) {
+        Set<String> beanNames = new LinkedHashSet<String>();
+        beanNames.addAll(doGetBeanNames(beanFactory, beanClass));
+        if (includingAncestors) {
+            BeanFactory parentBeanFactory = beanFactory.getParentBeanFactory();
+            if (parentBeanFactory instanceof ConfigurableListableBeanFactory) {
+                ConfigurableListableBeanFactory configurableListableBeanFactory =
+                        (ConfigurableListableBeanFactory) parentBeanFactory;
+                String[] parentBeanNames = getBeanNames(configurableListableBeanFactory, beanClass, includingAncestors);
+                beanNames.addAll(Arrays.asList(parentBeanNames));
+            }
+        }
+        return StringUtils.toStringArray(beanNames);
+    }
 
     /**
      * Get Bean Names from {@link ListableBeanFactory} by type.
@@ -146,13 +172,80 @@ public abstract class BeanUtils {
     public static String[] getBeanNames(ListableBeanFactory beanFactory, Class<?> beanClass,
                                         boolean includingAncestors) {
         // Issue : https://github.com/alibaba/spring-context-support/issues/22
-        if (includingAncestors) {
-            return beanNamesForTypeIncludingAncestors(beanFactory, beanClass, true, false);
+        final BeanFactory actualBeanFactory;
+        if (beanFactory instanceof ConfigurableApplicationContext) {
+            ConfigurableApplicationContext applicationContext = ConfigurableApplicationContext.class.cast(beanFactory);
+            actualBeanFactory = applicationContext.getBeanFactory();
         } else {
-            return beanFactory.getBeanNamesForType(beanClass, true, false);
+            actualBeanFactory = beanFactory;
+        }
+        if (actualBeanFactory instanceof ConfigurableListableBeanFactory) {
+            return getBeanNames((ConfigurableListableBeanFactory) actualBeanFactory, beanClass, includingAncestors);
         }
+        return EMPTY_BEAN_NAMES;
     }
 
+    private static Class<?> getFactoryBeanType(ConfigurableListableBeanFactory beanFactory,
+                                               BeanDefinition factoryBeanDefinition) {
+        BeanDefinition actualFactoryBeanDefinition = factoryBeanDefinition;
+        final List<Class<?>> beanClasses = new ArrayList<Class<?>>(1);
+        ClassLoader classLoader = beanFactory.getBeanClassLoader();
+        String factoryBeanClassName = actualFactoryBeanDefinition.getBeanClassName();
+        if (StringUtils.isEmpty(factoryBeanClassName)) {
+            String factoryBeanName = factoryBeanDefinition.getFactoryBeanName();
+            actualFactoryBeanDefinition = beanFactory.getBeanDefinition(factoryBeanName);
+            factoryBeanClassName = actualFactoryBeanDefinition.getBeanClassName();
+        }
+        if (StringUtils.hasText(factoryBeanClassName)) {
+            Class<?> factoryBeanClass = resolveBeanType(factoryBeanClassName, classLoader);
+            final String factoryMethodName = factoryBeanDefinition.getFactoryMethodName();
+            ReflectionUtils.doWithMethods(factoryBeanClass, new ReflectionUtils.MethodCallback() {
+                @Override
+                public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {
+                    beanClasses.add(method.getReturnType());
+                }
+            }, new ReflectionUtils.MethodFilter() {
+                @Override
+                public boolean matches(Method method) {
+                    return factoryMethodName.equals(method.getName());
+                }
+            });
+        }
+        return beanClasses.isEmpty() ? null : beanClasses.get(0);
+    }
+    private static Class<?> resolveBeanType(ConfigurableListableBeanFactory beanFactory, BeanDefinition beanDefinition) {
+        String factoryBeanName = beanDefinition.getFactoryBeanName();
+        ClassLoader classLoader = beanFactory.getBeanClassLoader();
+        Class<?> beanType = null;
+        if (StringUtils.hasText(factoryBeanName)) {
+            beanType = getFactoryBeanType(beanFactory, beanDefinition);
+        }
+        if (beanType == null) {
+            String beanClassName = beanDefinition.getBeanClassName();
+            if (StringUtils.hasText(beanClassName)) {
+                beanType = resolveBeanType(beanClassName, classLoader);
+            }
+        }
+        if (beanType == null) {
+            if (logger.isErrorEnabled()) {
+                String message = beanDefinition + " can't be resolved bean type!";
+                logger.error(message);
+            }
+        }
+        return beanType;
+    }
+    protected static Set<String> doGetBeanNames(ConfigurableListableBeanFactory beanFactory, Class<?> beanType) {
+        String[] allBeanNames = beanFactory.getBeanDefinitionNames();
+        Set<String> beanNames = new LinkedHashSet<String>();
+        for (String beanName : allBeanNames) {
+            BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);
+            Class<?> beanClass = resolveBeanType(beanFactory, beanDefinition);
+            if (beanClass != null && ClassUtils.isAssignable(beanType, beanClass)) {
+                beanNames.add(beanName);
+            }
+        }
+        return Collections.unmodifiableSet(beanNames);
+    }
 
     /**
      * Resolve Bean Type
