diff --git a/src/main/java/com/alibaba/spring/util/AnnotatedBeanDefinitionRegistryUtils.java b/src/main/java/com/alibaba/spring/util/AnnotatedBeanDefinitionRegistryUtils.java
index 1da1c8f..a6ee359 100644
--- a/src/main/java/com/alibaba/spring/util/AnnotatedBeanDefinitionRegistryUtils.java
+++ b/src/main/java/com/alibaba/spring/util/AnnotatedBeanDefinitionRegistryUtils.java
@@ -25,7 +25,6 @@ import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
-import static com.alibaba.spring.util.ClassUtils.EMPTY_CLASS_ARRAY;
 import static java.lang.String.format;
 import static java.util.Arrays.asList;
 import static org.springframework.context.annotation.AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR;
@@ -91,10 +90,9 @@ public abstract class AnnotatedBeanDefinitionRegistryUtils {
             return;
         }
 
-        Set<Class<?>> classesToRegister = new LinkedHashSet<Class<?>>(asList(annotatedClasses));
 
         // Remove all annotated-classes that have been registered
-        Iterator<Class<?>> iterator = classesToRegister.iterator();
+        Iterator<Class<?>> iterator = new ArrayList<Class<?>>(asList(annotatedClasses)).iterator();
 
         while (iterator.hasNext()) {
             Class<?> annotatedClass = iterator.next();
@@ -109,7 +106,7 @@ public abstract class AnnotatedBeanDefinitionRegistryUtils {
             logger.debug(registry.getClass().getSimpleName() + " will register annotated classes : " + asList(annotatedClasses) + " .");
         }
 
-        reader.register(classesToRegister.toArray(EMPTY_CLASS_ARRAY));
+        reader.register(annotatedClasses);
 
     }
 
diff --git a/src/main/java/com/alibaba/spring/util/ClassUtils.java b/src/main/java/com/alibaba/spring/util/ClassUtils.java
index 6e3f97b..630f754 100644
--- a/src/main/java/com/alibaba/spring/util/ClassUtils.java
+++ b/src/main/java/com/alibaba/spring/util/ClassUtils.java
@@ -28,14 +28,13 @@ import java.lang.reflect.Type;
 @SuppressWarnings("unchecked")
 public class ClassUtils {
 
     /**
      * The empty array for {@link Class}
      *
      * @since 1.0.6
      */
-    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];
 
 
     public static <T> Class<T> resolveGenericType(Class<?> declaredClass) {
         ParameterizedType parameterizedType = (ParameterizedType) declaredClass.getGenericSuperclass();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
