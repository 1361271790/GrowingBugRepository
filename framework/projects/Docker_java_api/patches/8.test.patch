diff --git a/src/test/java/com/amihaiemil/docker/RtPluginTestCase.java b/src/test/java/com/amihaiemil/docker/RtPluginTestCase.java
index da2e09a..edb859a 100644
--- a/src/test/java/com/amihaiemil/docker/RtPluginTestCase.java
+++ b/src/test/java/com/amihaiemil/docker/RtPluginTestCase.java
@@ -25,25 +25,16 @@
  */
 package com.amihaiemil.docker;
 
-import com.amihaiemil.docker.mock.ArrayPayloadOf;
 import com.amihaiemil.docker.mock.AssertRequest;
 import com.amihaiemil.docker.mock.Condition;
 import com.amihaiemil.docker.mock.Response;
-import java.io.IOException;
 import java.net.URI;
-import java.util.HashMap;
-import java.util.Map;
 import javax.json.Json;
-import javax.json.JsonArray;
 import javax.json.JsonObject;
-import org.apache.http.HttpEntityEnclosingRequest;
-import org.apache.http.HttpRequest;
 import org.apache.http.HttpStatus;
-import org.apache.http.util.EntityUtils;
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.collection.IsCollectionWithSize;
 import org.hamcrest.core.IsEqual;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mockito;
 
@@ -52,8 +43,6 @@ import org.mockito.Mockito;
  *
  * @author Boris Kuzmic (boris.kuzmic@gmail.com)
  * @since 0.0.8
- * @todo #266:30min Extract method stringPayloadOf to class to reuse in
- *  other test cases (like in RtPluginsTestCase.createOk() method)
  * @checkstyle MethodName (500 lines)
  */
 public final class RtPluginTestCase {
@@ -164,7 +153,7 @@ public final class RtPluginTestCase {
     }
 
     /**
-     * RtPlugin enable() must throw UnexpectedResponseException
+     * RtPluginenable() must throw UnexpectedResponseException
      * if service responds with 404.
      * @throws Exception If something goes wrong.
      */
@@ -266,281 +255,4 @@ public final class RtPluginTestCase {
         );
         plugin.disable();
     }
-
-    /**
-     * RtPlugin upgrade with properties ok.
-     * @throws Exception If something goes wrong.
-     */
-    @Test
-    public void upgradeOk() throws Exception {
-        new ListedPlugins(
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NO_CONTENT
-                )
-            ),
-            URI.create("http://localhost/plugins"),
-            DOCKER
-        ).pullAndInstall(
-            "vieus/sshfs",
-            "sshfs",
-            Json.createArrayBuilder().add(
-                Json.createObjectBuilder()
-                    .add("Name", "network")
-                    .add("Description", "")
-                    .add("Value", "host")
-            ).build()
-        );
-        final JsonArray properties = Json.createArrayBuilder().add(
-            Json.createObjectBuilder()
-                .add("Name", "mount")
-                .add("Description", "")
-                .add("Value", "/data")
-        ).build();
-        final Plugin plugin = new RtPlugin(
-            Json.createObjectBuilder().build(),
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NO_CONTENT
-                ),
-                new Condition(
-                    "Method should be a POST",
-                    req -> "POST".equals(req.getRequestLine().getMethod())
-                ),
-                new Condition(
-                    "Resource path must be /{name}/upgrade?remote=test",
-                    req -> req.getRequestLine().getUri()
-                        .endsWith("/sshfs/upgrade?remote=test")
-                ),
-                new Condition(
-                    "upgrade() must send JsonArray request body",
-                    req -> {
-                        JsonObject payload =
-                            new ArrayPayloadOf(req).next();
-                        return "mount".equals(payload.getString("Name"))
-                            && "/data".equals(payload.getString("Value"));
-                    }
-                )
-            ),
-            URI.create("http://localhost/plugins/sshfs"),
-            DOCKER
-        );
-        plugin.upgrade("test", properties);
-    }
-
-    /**
-     * RtPlugin upgrade throws UnexpectedResponseException if service
-     * responds with 404.
-     * @throws Exception If something goes wrong.
-     */
-    @Test(expected = UnexpectedResponseException.class)
-    public void upgradeFailsPluginNotInstalled() throws Exception {
-        final Plugin plugin = new RtPlugin(
-            Json.createObjectBuilder().build(),
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NOT_FOUND
-                ),
-                new Condition(
-                    "Method should be a POST",
-                    req -> "POST".equals(req.getRequestLine().getMethod())
-                ),
-                new Condition(
-                    "Resource path must be /{name}/upgrade?remote=test",
-                    req -> req.getRequestLine().getUri()
-                        .endsWith("/sshfs/upgrade?remote=test")
-                )
-            ),
-            URI.create("http://localhost/plugins/sshfs"),
-            DOCKER
-        );
-        final JsonArray properties = Json.createArrayBuilder().add(
-            Json.createObjectBuilder()
-                .add("Name", "mount")
-                .add("Description", "")
-                .add("Value", "/data")
-        ).build();
-        plugin.upgrade("test", properties);
-    }
-
-    /**
-     * RtPlugin push to repository ok.
-     * @throws Exception If something goes wrong.
-     */
-    @Test
-    public void pushOk() throws Exception {
-        new ListedPlugins(
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NO_CONTENT
-                )
-            ),
-            URI.create("http://localhost/plugins"),
-            DOCKER
-        ).pullAndInstall(
-            "vieus/sshfs",
-            "sshfs",
-            Json.createArrayBuilder().add(
-                Json.createObjectBuilder()
-                    .add("Name", "network")
-                    .add("Description", "")
-                    .add("Value", "host")
-            ).build()
-        );
-        final Plugin plugin = new RtPlugin(
-            Json.createObjectBuilder().build(),
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_OK
-                ),
-                new Condition(
-                    "Method should be a POST",
-                    req -> "POST".equals(req.getRequestLine().getMethod())
-                ),
-                new Condition(
-                    "Resource path must be /{name}/push",
-                    req -> req.getRequestLine().getUri()
-                        .endsWith("/sshfs/push")
-                )
-            ),
-            URI.create("http://localhost/plugins/sshfs"),
-            DOCKER
-        );
-        plugin.push();
-    }
-
-    /**
-     * RtPlugin push throws UnexpectedResponseException if service
-     * responds with 404.
-     * @throws Exception If something goes wrong.
-     */
-    @Test(expected = UnexpectedResponseException.class)
-    public void pushFailsPluginNotInstalled() throws Exception {
-        final Plugin plugin = new RtPlugin(
-            Json.createObjectBuilder().build(),
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NOT_FOUND
-                ),
-                new Condition(
-                    "Method should be a POST",
-                    req -> "POST".equals(req.getRequestLine().getMethod())
-                ),
-                new Condition(
-                    "Resource path must be /{name}/push",
-                    req -> req.getRequestLine().getUri()
-                        .endsWith("/sshfs/push")
-                )
-            ),
-            URI.create("http://localhost/plugins/sshfs"),
-            DOCKER
-        );
-        plugin.push();
-    }
-
-    /**
-     * RtPlugin configure plugin.
-     * @throws Exception If something goes wrong.
-     */
-    @Ignore
-    @Test
-    public void configureOk() throws Exception {
-        new ListedPlugins(
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NO_CONTENT
-                )
-            ),
-            URI.create("http://localhost/plugins"),
-            DOCKER
-        ).pullAndInstall(
-            "vieus/sshfs",
-            "sshfs",
-            Json.createArrayBuilder().add(
-                Json.createObjectBuilder()
-                    .add("Name", "network")
-                    .add("Description", "")
-                    .add("Value", "host")
-            ).build()
-        );
-        final Map<String, String> options = new HashMap<>();
-        options.put("DEBUG", "1");
-        final Plugin plugin = new RtPlugin(
-            Json.createObjectBuilder().build(),
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NO_CONTENT
-                ),
-                new Condition(
-                    "Method should be a POST",
-                    req -> "POST".equals(req.getRequestLine().getMethod())
-                ),
-                new Condition(
-                    "Resource path must be /{name}/set",
-                    req -> req.getRequestLine().getUri()
-                        .endsWith("/sshfs/set")
-                ),
-                new Condition(
-                    "configure() must send String Array as request body",
-                    req -> "[\"DEBUG=1\"]".equals(this.stringPayloadOf(req))
-                )
-            ),
-            URI.create("http://localhost/plugins/sshfs"),
-            DOCKER
-        );
-        plugin.configure(options);
-    }
-
-    /**
-     * RtPlugin configure throws UnexpectedResponseException if service
-     * responds with 404.
-     * @throws Exception If something goes wrong.
-     */
-    @Ignore
-    @Test(expected = UnexpectedResponseException.class)
-    public void configureFailsPluginNotInstalled() throws Exception {
-        final Plugin plugin = new RtPlugin(
-            Json.createObjectBuilder().build(),
-            new AssertRequest(
-                new Response(
-                    HttpStatus.SC_NOT_FOUND
-                ),
-                new Condition(
-                    "Method should be a POST",
-                    req -> "POST".equals(req.getRequestLine().getMethod())
-                ),
-                new Condition(
-                    "Resource path must be /{name}/set",
-                    req -> req.getRequestLine().getUri()
-                        .endsWith("/sshfs/set")
-                )
-            ),
-            URI.create("http://localhost/plugins/sshfs"),
-            DOCKER
-        );
-        plugin.configure(new HashMap<>());
-    }
-
-    /**
-     * Extracts request payload as String.
-     * @param request Http Request.
-     * @return Payload as String.
-     */
-    private String stringPayloadOf(final HttpRequest request) {
-        try {
-            final String payload;
-            if (request instanceof HttpEntityEnclosingRequest) {
-                payload = EntityUtils.toString(
-                    ((HttpEntityEnclosingRequest) request).getEntity()
-                );
-            } else {
-                payload = "";
-            }
-            return payload;
-        } catch (final IOException ex) {
-            throw new IllegalStateException(
-                "Cannot read request payload", ex
-            );
-        }
-    }
 }
diff --git a/src/test/java/com/amihaiemil/docker/RtPluginsTestCase.java b/src/test/java/com/amihaiemil/docker/RtPluginsTestCase.java
index 9614f14..a8109a9 100644
--- a/src/test/java/com/amihaiemil/docker/RtPluginsTestCase.java
+++ b/src/test/java/com/amihaiemil/docker/RtPluginsTestCase.java
@@ -25,7 +25,6 @@
  */
 package com.amihaiemil.docker;
 
-import com.amihaiemil.docker.mock.ArrayPayloadOf;
 import com.amihaiemil.docker.mock.AssertRequest;
 import com.amihaiemil.docker.mock.Condition;
 import com.amihaiemil.docker.mock.Response;
@@ -138,7 +137,7 @@ public final class RtPluginsTestCase {
                     "pullAndInstall() must send Json body request",
                     req -> {
                         JsonObject payload =
-                            new ArrayPayloadOf(req).next();
+                            this.arrayPayloadOf(req).getJsonObject(0);
                         return "network".equals(payload.getString("Name"))
                             && "host".equals(payload.getString("Value"));
                     }
@@ -233,4 +232,28 @@ public final class RtPluginsTestCase {
         }
     }
 
+    /**
+     * Extracts request payload as JsonArray.
+     * @param request Http Request.
+     * @return Payload as Json array.
+     */
+    private JsonArray arrayPayloadOf(final HttpRequest request) {
+        try {
+            final JsonArray body;
+            if (request instanceof HttpEntityEnclosingRequest) {
+                body = Json.createReader(
+                    ((HttpEntityEnclosingRequest) request).getEntity()
+                        .getContent()
+                ).readArray();
+            } else {
+                body =  Json.createArrayBuilder().build();
+            }
+            return body;
+        } catch (final IOException ex) {
+            throw new IllegalStateException(
+                "Cannot read request payload", ex
+            );
+        }
+    }
+
 }
diff --git a/src/test/java/com/amihaiemil/docker/mock/ArrayPayloadOf.java b/src/test/java/com/amihaiemil/docker/mock/ArrayPayloadOf.java
deleted file mode 100644
index a93ce09..0000000
--- a/src/test/java/com/amihaiemil/docker/mock/ArrayPayloadOf.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/**
- * Copyright (c) 2018-2019, Mihai Emil Andronache
- * All rights reserved.
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- * 1)Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- * 2)Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- * 3)Neither the name of docker-java-api nor the names of its
- * contributors may be used to endorse or promote products derived from
- * this software without specific prior written permission.
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-package com.amihaiemil.docker.mock;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Iterator;
-import javax.json.Json;
-import javax.json.JsonObject;
-import javax.json.JsonReader;
-import org.apache.http.HttpEntityEnclosingRequest;
-import org.apache.http.HttpRequest;
-
-/**
- * Json Array payload of an HttpRequest.
- *
- * @author Boris Kuzmic (boris.kuzmic@gmail.com)
- * @since 0.0.8
- */
-public final class ArrayPayloadOf implements Iterator<JsonObject> {
-
-    /**
-     * List of JsonObjects.
-     */
-    private final Iterator<JsonObject> resources;
-
-    /**
-     * Ctor.
-     *
-     * @param request The http request
-     * @throws IllegalStateException if the request's payload cannot be read
-     */
-    public ArrayPayloadOf(final HttpRequest request) {
-        try (JsonReader reader = Json.createReader(
-            ((HttpEntityEnclosingRequest) request).getEntity().getContent())) {
-            if (request instanceof HttpEntityEnclosingRequest) {
-                this.resources =
-                    reader.readArray().getValuesAs(JsonObject.class).iterator();
-            } else {
-                this.resources = new ArrayList<JsonObject>().iterator();
-            }
-        } catch (final IOException ex) {
-            throw new IllegalStateException(
-                "Cannot read request payload", ex
-            );
-        }
-    }
-
-    @Override
-    public boolean hasNext() {
-        return this.resources.hasNext();
-    }
-
-    @Override
-    public JsonObject next() {
-        return this.resources.next();
-    }
-}
