diff --git a/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java b/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java
index a1db452..343bfe1 100644
--- a/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java
+++ b/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java
@@ -1,7 +1,10 @@
 /*
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
@@ -14,7 +17,6 @@
 package org.apache.commons.functor.generator;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -31,6 +33,7 @@ import org.junit.Test;
 
 /**
  * Tests the Transformed Generator class.
+ * @author Bruno P. Kinoshita (brunodepaulak@yahoo.com.br)
  */
 public class TestTransformedGenerator
 {
@@ -40,7 +43,7 @@ public class TestTransformedGenerator
         wrappedGenerator = new IntegerRange(1, 10);
         sumsTwoGenerator = new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);
     }
-
+    
     @After
     public void tearDown() {
         wrappedGenerator = null;
@@ -50,7 +53,7 @@ public class TestTransformedGenerator
 
     // Tests
     // ------------------------------------------------------------------------
-
+    
     @Test
     public void testConstructorProhibitsNull() {
         try {
@@ -72,10 +75,10 @@ public class TestTransformedGenerator
             // expected
         }
     }
-
+    
     @Test
     public void testEquals() {
-        TransformedGenerator<Integer, Integer> anotherTransformedGenerator =
+        TransformedGenerator<Integer, Integer> anotherTransformedGenerator = 
                         new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);
         assertEquals(sumsTwoGenerator, sumsTwoGenerator);
         assertEquals(sumsTwoGenerator, anotherTransformedGenerator);
@@ -88,24 +91,18 @@ public class TestTransformedGenerator
                 }
             });
         assertTrue( !sumsTwoGenerator.equals(aGenerateWithADifferentFunction));
-
-        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped =
+        
+        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped = 
         		new TransformedGenerator<Integer, Integer>(new IntegerRange(1,2), sumsTwo);
         assertTrue(!sumsTwoGenerator.equals(aTransformedGeneratorWithADifferentWrapped));
     }
-
+    
     @Test
     public void testHashcode() {
         assertEquals(sumsTwoGenerator.hashCode(), sumsTwoGenerator.hashCode());
         assertEquals(sumsTwoGenerator.hashCode(), new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo).hashCode());
-        assertFalse(sumsTwoGenerator.hashCode() == new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo) {
-            @Override
-            protected Generator<? extends Integer> getWrappedGenerator() {
-                return null;
-            }
-        }.hashCode());
     }
-
+    
     @Test
     public void testGenerate() {
         final List<Integer> doubledValues = new ArrayList<Integer>();
@@ -114,9 +111,9 @@ public class TestTransformedGenerator
                 doubledValues.add(obj);
             }
         });
-
+        
         final List<Integer> expected = Arrays.asList(3, 4, 5, 6, 7, 8, 9, 10 , 11);
-
+        
         assertEquals(9, doubledValues.size());
         assertEquals(expected, doubledValues);
     }
@@ -124,7 +121,7 @@ public class TestTransformedGenerator
     // Attributes
     // ------------------------------------------------------------------------
     private static final Integer TWO = new Integer(2);
-
+    
     private Generator<Integer> wrappedGenerator = null;
     private UnaryFunction<Integer, Integer> sumsTwo = new UnaryFunction<Integer, Integer>() {
         public Integer evaluate( Integer obj ) {
@@ -132,5 +129,5 @@ public class TestTransformedGenerator
         }
     };
     private TransformedGenerator<Integer, Integer> sumsTwoGenerator = null;
-
+    
 }
