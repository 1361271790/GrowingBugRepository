diff --git a/src/test/java/org/apache/maven/plugins/shade/mojo/ShadeMojoTest.java b/src/test/java/org/apache/maven/plugins/shade/mojo/ShadeMojoTest.java
index a7dbc6d..59d1def 100644
--- a/src/test/java/org/apache/maven/plugins/shade/mojo/ShadeMojoTest.java
+++ b/src/test/java/org/apache/maven/plugins/shade/mojo/ShadeMojoTest.java
@@ -28,27 +28,11 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
-import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.DefaultArtifact;
-import org.apache.maven.artifact.factory.ArtifactFactory;
-import org.apache.maven.artifact.handler.ArtifactHandler;
-import org.apache.maven.artifact.metadata.ArtifactMetadataSource;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionException;
-import org.apache.maven.artifact.resolver.ArtifactResolutionResult;
-import org.apache.maven.artifact.resolver.ArtifactResolver;
-import org.apache.maven.artifact.resolver.DefaultArtifactResolver;
-import org.apache.maven.artifact.resolver.filter.ArtifactFilter;
-import org.apache.maven.artifact.versioning.VersionRange;
 import org.apache.maven.plugins.shade.Shader;
-import org.apache.maven.plugins.shade.filter.Filter;
 import org.apache.maven.plugins.shade.relocation.SimpleRelocator;
 import org.apache.maven.plugins.shade.resource.ComponentsXmlResourceTransformer;
-import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.PlexusTestCase;
 
 /**
@@ -99,86 +83,6 @@ public class ShadeMojoTest
         Method method = c.getDeclaredMethod( "getClassRealmPackageImport", new Class[0] );
         assertEquals( "org.codehaus.plexus.util.xml.pull", method.invoke( null, new Object[0] ) );
     }

-    public void testShadeWithFilter() throws Exception
-    {
-        ShadeMojo mojo = new ShadeMojo();

-        Field createSourcesJar = ShadeMojo.class.getDeclaredField("createSourcesJar");
-        createSourcesJar.setAccessible(true);
-        createSourcesJar.set(mojo, Boolean.TRUE);

-        ArtifactFactory artifactFactory = (ArtifactFactory) lookup( ArtifactFactory.ROLE );
-        Field artifactFactoryField = ShadeMojo.class.getDeclaredField("artifactFactory");
-        artifactFactoryField.setAccessible(true);
-        artifactFactoryField.set(mojo, artifactFactory);

-        ArtifactResolver mockArtifactResolver = new DefaultArtifactResolver()
-        {
-            public void resolve(Artifact artifact, List remoteRepos,
-                    ArtifactRepository repo)
-                    throws ArtifactResolutionException,
-                    ArtifactNotFoundException
-            {
-                artifact.setResolved(true);
-                artifact.setFile(new File(artifact.getArtifactId() + "-"
-                        + artifact.getVersion()
-                        + (artifact.getClassifier() != null ? "-" + artifact.getClassifier() : "") 
-                        + ".jar"));
-            }
-        };
-        Field artifactResolverField = ShadeMojo.class.getDeclaredField("artifactResolver");
-        artifactResolverField.setAccessible(true);
-        artifactResolverField.set(mojo, mockArtifactResolver);

-        MavenProject project = new MavenProject();
-        ArtifactHandler artifactHandler = (ArtifactHandler) lookup( ArtifactHandler.ROLE );
-        Artifact artifact = new DefaultArtifact("org.apache.myfaces.core", "myfaces-impl",
-                VersionRange.createFromVersion("2.0.1-SNAPSHOT"), "compile", "jar", null, 
-                artifactHandler);
-        mockArtifactResolver.resolve(artifact, null, null); // setFile and setResolved
-        project.setArtifact(artifact);
-        Field projectField = ShadeMojo.class.getDeclaredField("project");
-        projectField.setAccessible(true);
-        projectField.set(mojo, project);

-        ArchiveFilter archiveFilter = new ArchiveFilter();
-        Field archiveFilterArtifact = ArchiveFilter.class.getDeclaredField("artifact");
-        archiveFilterArtifact.setAccessible(true);
-        archiveFilterArtifact.set(archiveFilter, "org.apache.myfaces.core:myfaces-impl");

-        Field filtersField = ShadeMojo.class.getDeclaredField("filters");
-        filtersField.setAccessible(true);
-        filtersField.set(mojo, new ArchiveFilter[] { archiveFilter });

-        Method getFilters = ShadeMojo.class.getDeclaredMethod("getFilters", new Class[0]);
-        getFilters.setAccessible(true);
-        List filters = (List) getFilters.invoke(mojo, new Object[0]);

-        assertEquals(1, filters.size());
-        Filter filter = (Filter) filters.get(0);
-        assertTrue(filter.canFilter(new File("myfaces-impl-2.0.1-SNAPSHOT.jar"))); // binary jar
-        assertTrue(filter.canFilter(new File("myfaces-impl-2.0.1-SNAPSHOT-sources.jar"))); // sources jar
-    }
 
     public void shaderWithPattern(String shadedPattern, File jar)
         throws Exception
