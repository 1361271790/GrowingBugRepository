diff --git a/src/main/java/com/alibaba/mtc/MtContextThreadLocal.java b/src/main/java/com/alibaba/mtc/MtContextThreadLocal.java
index 2978205..20c5de0 100644
--- a/src/main/java/com/alibaba/mtc/MtContextThreadLocal.java
+++ b/src/main/java/com/alibaba/mtc/MtContextThreadLocal.java
@@ -1,6 +1,7 @@
 package com.alibaba.mtc;
 
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.Map;
 import java.util.WeakHashMap;
 
@@ -89,18 +90,35 @@ public class MtContextThreadLocal<T> extends InheritableThreadLocal<T> {
     static Map<MtContextThreadLocal<?>, Object> backupAndSet(Map<MtContextThreadLocal<?>, Object> set) {
         // backup MtContext
         Map<MtContextThreadLocal<?>, Object> backup = new HashMap<MtContextThreadLocal<?>, Object>();
-        for (Map.Entry<MtContextThreadLocal<?>, Object> entry : set.entrySet()) {
-            @SuppressWarnings("unchecked")
-            MtContextThreadLocal<Object> threadLocal = (MtContextThreadLocal<Object>) entry.getKey();
+        for (Iterator<? extends Map.Entry<MtContextThreadLocal<?>, ?>> iterator = holder.get().entrySet().iterator();
+             iterator.hasNext(); ) {
+            Map.Entry<MtContextThreadLocal<?>, ?> next = iterator.next();
+            MtContextThreadLocal<?> threadLocal = next.getKey();
             backup.put(threadLocal, threadLocal.get());
-            threadLocal.set(entry.getValue());
+            if (!set.containsKey(threadLocal)) {
+                iterator.remove();
+                threadLocal.remove();
+            }
         }
+        setMtContexts(set);
         return backup;
     }
 
     static void restore(Map<MtContextThreadLocal<?>, Object> backup) {
         // restore MtContext
-        for (Map.Entry<MtContextThreadLocal<?>, Object> entry : backup.entrySet()) {
+        for (Iterator<? extends Map.Entry<MtContextThreadLocal<?>, ?>> iterator = holder.get().entrySet().iterator();
+             iterator.hasNext(); ) {
+            Map.Entry<MtContextThreadLocal<?>, ?> next = iterator.next();
+            MtContextThreadLocal<?> threadLocal = next.getKey();
+            if (!backup.containsKey(threadLocal)) {
+                iterator.remove();
+                threadLocal.remove();
+            }
+        }
+        setMtContexts(backup);
+    }
+    static void setMtContexts(Map<MtContextThreadLocal<?>, Object> set) {
+        for (Map.Entry<MtContextThreadLocal<?>, Object> entry : set.entrySet()) {
             @SuppressWarnings("unchecked")
             MtContextThreadLocal<Object> threadLocal = (MtContextThreadLocal<Object>) entry.getKey();
             threadLocal.set(entry.getValue());
