diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/PolymorphicTypesTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/PolymorphicTypesTest.java
index 37a5efa5..f7f2b6a3 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/PolymorphicTypesTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/PolymorphicTypesTest.java
@@ -3,13 +3,9 @@ package com.fasterxml.jackson.dataformat.xml.misc;
 import java.util.ArrayList;
 import java.util.List;
 
-import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonIdentityInfo;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.ObjectIdGenerators;
-
 import com.fasterxml.jackson.dataformat.xml.XmlMapper;
 import com.fasterxml.jackson.dataformat.xml.XmlTestBase;
 
@@ -51,35 +47,30 @@ public class PolymorphicTypesTest extends XmlTestBase
         public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }
     }
 
-    // [dataformat-xml#451]
-    @JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)
-    @JsonSubTypes(@JsonSubTypes.Type(Child451.class))
-    public interface Value451 {}
-
-    public static class Child451 implements Value451 {
-        private final String property1;
+    /*
+    /**********************************************************
+    /* Set up
+    /**********************************************************
+     */
 
-        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
-        public Child451(@JsonProperty("property1") String property1) {
-            this.property1 = property1;
-        }
+    protected XmlMapper _xmlMapper;
 
-        public String getProperty1() {
-            return property1;
-        }
-    }    
+    // let's actually reuse XmlMapper to make things bit faster
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        _xmlMapper = new XmlMapper();
+    }
 
     /*
-    /**********************************************************************
-    /* Test methods
-    /**********************************************************************
+    /**********************************************************
+    /* Unit tests
+    /**********************************************************
      */
 
-    private final XmlMapper MAPPER = newMapper();
-
     public void testAsClassProperty() throws Exception
     {
-        String xml = MAPPER.writeValueAsString(new SubTypeWithClassProperty("Foobar"));
+        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassProperty("Foobar"));
 
         // Type info should be written as an attribute, so:
         final String exp = 
@@ -89,7 +80,7 @@ public class PolymorphicTypesTest extends XmlTestBase
                 ;
         assertEquals(exp, xml);
         
-        Object result = MAPPER.readValue(xml, BaseTypeWithClassProperty.class);
+        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassProperty.class);
         assertNotNull(result);
         assertEquals(SubTypeWithClassProperty.class, result.getClass());
         assertEquals("Foobar", ((SubTypeWithClassProperty) result).name);
@@ -97,14 +88,16 @@ public class PolymorphicTypesTest extends XmlTestBase
         
     public void testAsClassObject() throws Exception
     {
-        String xml = MAPPER.writeValueAsString(new SubTypeWithClassObject("Foobar"));
-        Object result = MAPPER.readValue(xml, BaseTypeWithClassObject.class);
+        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassObject("Foobar"));
+        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassObject.class);
         assertNotNull(result);
         assertEquals(SubTypeWithClassObject.class, result.getClass());
         assertEquals("Foobar", ((SubTypeWithClassObject) result).name);
     }
 
-    // Test for [dataformat-xml#81]
+    /**
+     * Test for [dataformat-xml#81]
+     */
     public void testAsPropertyWithObjectId() throws Exception
     {
         List<TypeWithClassPropertyAndObjectId> data = new ArrayList<PolymorphicTypesTest.TypeWithClassPropertyAndObjectId>();
@@ -112,23 +105,11 @@ public class PolymorphicTypesTest extends XmlTestBase
         data.add(object);
         // This will be written as an id reference instead of object; as such, no type info will be written.
         data.add(object);
-        String xml = MAPPER.writeValueAsString(new Wrapper(data));
-        Wrapper result = MAPPER.readValue(xml, Wrapper.class);
+        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));
+        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);
         assertNotNull(result);
         assertSame(result.data.get(0), result.data.get(1));
         assertEquals("Foobar", result.data.get(0).id);
     }
-
-    // Test for [dataformat-xml#451]
-    public void testDeduction() throws Exception
-    {
-        String xml = MAPPER.writeValueAsString(new Child451("value1"));
-        assertTrue(xml.contains("<property1>value1</property1>"));
-
-        // and try reading back for funsies
-        Value451 result = MAPPER.readValue(xml, Value451.class);
-        assertNotNull(result);
-        assertEquals(Child451.class, result.getClass());
-    }
 }
    
\ No newline at end of file
