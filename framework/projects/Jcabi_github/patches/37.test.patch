diff --git a/src/test/java/com/jcabi/github/RtGistsITCase.java b/src/test/java/com/jcabi/github/RtGistsITCase.java
index e924d08f..67e623d2 100644
--- a/src/test/java/com/jcabi/github/RtGistsITCase.java
+++ b/src/test/java/com/jcabi/github/RtGistsITCase.java
@@ -93,6 +93,7 @@ public final class RtGistsITCase {
         );
         gists.remove(gist.name());
     }
+
     /**
      * This tests that RtGists can remove a gist by name.
      * @throws Exception - if something goes wrong.
diff --git a/src/test/java/com/jcabi/github/RtHookTest.java b/src/test/java/com/jcabi/github/RtHookTest.java
index 0d0f53cd..74ebcf1f 100644
--- a/src/test/java/com/jcabi/github/RtHookTest.java
+++ b/src/test/java/com/jcabi/github/RtHookTest.java
@@ -1,93 +1,93 @@
-/**
- * Copyright (c) 2012-2013, JCabi.com
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met: 1) Redistributions of source code must retain the above
- * copyright notice, this list of conditions and the following
- * disclaimer. 2) Redistributions in binary form must reproduce the above
- * copyright notice, this list of conditions and the following
- * disclaimer in the documentation and/or other materials provided
- * with the distribution. 3) Neither the name of the jcabi.com nor
- * the names of its contributors may be used to endorse or promote
- * products derived from this software without specific prior written
- * permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
- * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.jcabi.github;
-
-import com.rexsl.test.mock.MkAnswer;
-import com.rexsl.test.mock.MkContainer;
-import com.rexsl.test.mock.MkGrizzlyContainer;
-import com.rexsl.test.request.ApacheRequest;
-import java.net.HttpURLConnection;
-import org.hamcrest.MatcherAssert;
-import org.hamcrest.Matchers;
-import org.junit.Test;
-import org.mockito.Mockito;
-
-/**
- * Test case for {@link RtHook}.
- *
- * @author Carlos Miranda (miranda.cma@gmail.com)
- * @version $Id$
- */
-public final class RtHookTest {
-
-    /**
-     * RtHook should perform a JSON request to "/repos/:owner/:repo/hooks/:id".
-     *
-     * @throws Exception If a problem occurs.
-     */
-    @Test
-    public void performsValidRequest() throws Exception {
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(
-                HttpURLConnection.HTTP_OK,
-                "{\"test\":\"hook\"}"
-            )
-        ).start();
-        try {
-            final Hook hook = new RtHook(
-                new ApacheRequest(container.home()),
-                repo(),
-                1
-            );
-            MatcherAssert.assertThat(
-                hook.json(),
-                Matchers.notNullValue()
-            );
-            MatcherAssert.assertThat(
-                container.take().uri().toString(),
-                Matchers.endsWith("/repos/test/repo/hooks/1")
-            );
-        } finally {
-            container.stop();
-        }
-    }
-
-    /**
-     * Create and return repo for testing.
-     * @return Repo
-     */
-    private static Repo repo() {
-        final Repo repo = Mockito.mock(Repo.class);
-        Mockito.doReturn(new Coordinates.Simple("test", "repo"))
-            .when(repo).coordinates();
-        return repo;
-    }
-
-}
+/**
+ * Copyright (c) 2012-2013, JCabi.com
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met: 1) Redistributions of source code must retain the above
+ * copyright notice, this list of conditions and the following
+ * disclaimer. 2) Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following
+ * disclaimer in the documentation and/or other materials provided
+ * with the distribution. 3) Neither the name of the jcabi.com nor
+ * the names of its contributors may be used to endorse or promote
+ * products derived from this software without specific prior written
+ * permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.jcabi.github;
+
+import com.rexsl.test.mock.MkAnswer;
+import com.rexsl.test.mock.MkContainer;
+import com.rexsl.test.mock.MkGrizzlyContainer;
+import com.rexsl.test.request.ApacheRequest;
+import java.net.HttpURLConnection;
+import org.hamcrest.MatcherAssert;
+import org.hamcrest.Matchers;
+import org.junit.Test;
+import org.mockito.Mockito;
+
+/**
+ * Test case for {@link RtHook}.
+ *
+ * @author Carlos Miranda (miranda.cma@gmail.com)
+ * @version $Id$
+ */
+public final class RtHookTest {
+
+    /**
+     * RtHook should perform a JSON request to "/repos/:owner/:repo/hooks/:id".
+     *
+     * @throws Exception If a problem occurs.
+     */
+    @Test
+    public void performsValidRequest() throws Exception {
+        final MkContainer container = new MkGrizzlyContainer().next(
+            new MkAnswer.Simple(
+                HttpURLConnection.HTTP_OK,
+                "{\"test\":\"hook\"}"
+            )
+        ).start();
+        try {
+            final Hook hook = new RtHook(
+                new ApacheRequest(container.home()),
+                repo(),
+                1
+            );
+            MatcherAssert.assertThat(
+                hook.json(),
+                Matchers.notNullValue()
+            );
+            MatcherAssert.assertThat(
+                container.take().uri().toString(),
+                Matchers.endsWith("/repos/test/repo/hooks/1")
+            );
+        } finally {
+            container.stop();
+        }
+    }
+
+    /**
+     * Create and return repo for testing.
+     * @return Repo
+     */
+    private static Repo repo() {
+        final Repo repo = Mockito.mock(Repo.class);
+        Mockito.doReturn(new Coordinates.Simple("test", "repo"))
+            .when(repo).coordinates();
+        return repo;
+    }
+
+}
diff --git a/src/test/java/com/jcabi/github/mock/MkMilestonesTest.java b/src/test/java/com/jcabi/github/mock/MkMilestonesTest.java
deleted file mode 100644
index 6badd2ba..00000000
--- a/src/test/java/com/jcabi/github/mock/MkMilestonesTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/**
- * Copyright (c) 2012-2013, JCabi.com
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met: 1) Redistributions of source code must retain the above
- * copyright notice, this list of conditions and the following
- * disclaimer. 2) Redistributions in binary form must reproduce the above
- * copyright notice, this list of conditions and the following
- * disclaimer in the documentation and/or other materials provided
- * with the distribution. 3) Neither the name of the jcabi.com nor
- * the names of its contributors may be used to endorse or promote
- * products derived from this software without specific prior written
- * permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
- * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.jcabi.github.mock;
-
-import com.jcabi.github.Milestone;
-import com.jcabi.github.Milestones;
-import com.jcabi.github.Repo;
-import com.jcabi.immutable.ArrayMap;
-import javax.json.Json;
-import org.hamcrest.MatcherAssert;
-import org.hamcrest.Matchers;
-import org.junit.Ignore;
-import org.junit.Test;
-
-/**
- * Test class for MkMilestones.
- * @author Mihai Andronache (amihaiemil@gmail.com)
- * @version $Id$
- * @checkstyle MultipleStringLiterals (500 lines)
- */
-public final class MkMilestonesTest {
-
-    /**
-     * This tests that MkMilestones can return its owner repo.
-     * @throws Exception - if something goes wrong.
-     * @todo #111 Method repo() in MkMilestones has to be implemented.
-     *  Until then, this test is ignored.
-     */
-    @Test
-    @Ignore
-    public void returnsRepo() throws Exception {
-        final Repo repo = this.repo();
-        final Milestones milestones = repo.milestones();
-        final Repo owner = milestones.repo();
-        MatcherAssert.assertThat(repo, Matchers.is(owner));
-    }
-
-    /**
-     * This tests that MkMilestones can create a MkMilestone.
-     * @throws Exception - if something goes wrong.
-     * @todo #111 Method create() in MkMilestones has to be implemented.
-     *  Until then, this test is ignored.
-     */
-    @Test
-    @Ignore
-    public void createsMilestone() throws Exception {
-        final Milestones milestones = this.repo().milestones();
-        final Milestone milestone = milestones.create("test milestone");
-        MatcherAssert.assertThat(milestone, Matchers.notNullValue());
-    }
-
-    /**
-     * This tests that MkMilestones can return a certain MkMilestone, by number.
-     * @throws Exception - if something goes wrong.
-     * @todo #111 Method get() in MkMilestones has to be implemented.
-     *  Until then, this test is ignored.
-     */
-    @Test
-    @Ignore
-    public void getsMilestone() throws Exception {
-        final Milestones milestones = this.repo().milestones();
-        final Milestone created = milestones.create("test");
-        MatcherAssert.assertThat(
-            milestones.get(created.number()),
-            Matchers.notNullValue()
-        );
-    }
-    /**
-     * This tests that MkMilestones can remove a certain MkMilestone, by number.
-     * @throws Exception - if something goes wrong.
-     * @todo #111 Method remove() in MkMilestones has to be implemented.
-     *  Until then, this test is ignored.
-     */
-    @Test
-    @Ignore
-    public void removesMilestone() throws Exception {
-        final Milestones milestones = this.repo().milestones();
-        final Milestone created = milestones.create("testTitle");
-        milestones.remove(created.number());
-        MatcherAssert.assertThat(
-            milestones.get(created.number()),
-            Matchers.nullValue()
-        );
-    }
-    /**
-     * This tests that the iterate(Map<String, String> params)
-     * method in MkMilestones works fine.
-     * @throws Exception - if something goes wrong.
-     * @todo #111 Method iterate()
-     *  in MkMilestones has to be implemented.
-     *  Until then, this test is ignored.
-     */
-    @Test
-    @Ignore
-    public void iteratesMilestones() throws Exception {
-        final Milestones milestones = this.repo().milestones();
-        milestones.create("testMilestone");
-        MatcherAssert.assertThat(
-            milestones.iterate(new ArrayMap<String, String>()),
-            Matchers.<Milestone>iterableWithSize(1)
-        );
-    }
-    /**
-     * Repo for testing.
-     * @return Repo
-     * @throws Exception - if something goes wrong.
-     */
-    private Repo repo() throws Exception {
-        return new MkGithub().repos().create(
-            Json.createObjectBuilder().add("name", "test").build()
-        );
-    }
-}
diff --git a/src/test/java/com/jcabi/github/mock/MkRepoTest.java b/src/test/java/com/jcabi/github/mock/MkRepoTest.java
index 2b8934b5..d88627dc 100644
--- a/src/test/java/com/jcabi/github/mock/MkRepoTest.java
+++ b/src/test/java/com/jcabi/github/mock/MkRepoTest.java
@@ -30,7 +30,6 @@
 package com.jcabi.github.mock;
 
 import com.jcabi.github.Coordinates;
-import com.jcabi.github.Milestones;
 import com.jcabi.github.Repo;
 import com.jcabi.github.Repos;
 import java.io.IOException;
@@ -43,7 +42,6 @@ import org.junit.Test;
  * Test case for {@link Repo}.
  * @author Yegor Bugayenko (yegor@tpc2.com)
  * @version $Id$
- * @checkstyle MultipleStringLiterals (500 lines)
  */
 public final class MkRepoTest {
 
@@ -63,20 +61,6 @@ public final class MkRepoTest {
         );
     }
 
-    /**
-     * This tests that the milestones() method in MkRepo is working fine.
-     * @throws Exception - if anything goes wrong.
-     */
-    @Test
-    public void returnsMkMilestones() throws Exception {
-        final Repos repos = new MkRepos(new MkStorage.InFile(), "jeff");
-        final Repo repo = repos.create(
-            Json.createObjectBuilder().add("name", "test1").build()
-        );
-        final Milestones milestones = repo.milestones();
-        MatcherAssert.assertThat(milestones, Matchers.notNullValue());
-    }
-
     /**
      * Repo can fetch its commits.
      *
