diff --git a/src/test/java/com/jcabi/github/RtCommentTest.java b/src/test/java/com/jcabi/github/RtCommentTest.java
index f11f58da..7113327b 100644
--- a/src/test/java/com/jcabi/github/RtCommentTest.java
+++ b/src/test/java/com/jcabi/github/RtCommentTest.java
@@ -30,16 +30,8 @@
 package com.jcabi.github;
 
 import com.jcabi.github.mock.MkGithub;
-import com.rexsl.test.Request;
-import com.rexsl.test.mock.MkAnswer;
-import com.rexsl.test.mock.MkContainer;
-import com.rexsl.test.mock.MkGrizzlyContainer;
-import com.rexsl.test.mock.MkQuery;
-import com.rexsl.test.request.ApacheRequest;
 import com.rexsl.test.request.FakeRequest;
-import java.net.HttpURLConnection;
 import javax.json.Json;
-import javax.json.JsonObject;
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.Matchers;
 import org.junit.Test;
@@ -49,18 +41,21 @@ import org.junit.Test;
  *
  * @author Carlos Miranda (miranda.cma@gmail.com)
  * @version $Id$
- * @checkstyle MultipleStringLiterals (500 lines)
+ * @todo #56 This class only tests the compareTo method so far. Test for the
+ *  other operations should also be implemented.
  */
 public final class RtCommentTest {
 
     /**
      * RtComment should be able to compare different instances.
+     *
      * @throws Exception when a problem occurs.
      */
     @Test
     public void canCompareInstances() throws Exception {
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("title", "body");
+        final Issue issue = new MkGithub().repos().create(
+            Json.createObjectBuilder().add("name", "test").build()
+        ).issues().create("testing", "issue");
         final RtComment less = new RtComment(new FakeRequest(), issue, 1);
         final RtComment greater = new RtComment(new FakeRequest(), issue, 2);
         MatcherAssert.assertThat(
@@ -71,143 +66,4 @@ public final class RtCommentTest {
         );
     }
 
-    /**
-     * RtComment can return its issue (owner).
-     * @throws Exception - if anything goes wrong.
-     */
-    @Test
-    public void returnsItsIssue() throws Exception {
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("testing1", "issue1");
-        final RtComment comment = new RtComment(new FakeRequest(), issue, 1);
-        MatcherAssert.assertThat(comment.issue(), Matchers.is(issue));
-    }
-
-    /**
-     * RtComment can return its number.
-     * @throws Exception - in case something goes wrong.
-     */
-    @Test
-    public void returnsItsNumber() throws Exception {
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("testing2", "issue2");
-        final int num = 10;
-        final RtComment comment = new RtComment(new FakeRequest(), issue, num);
-        MatcherAssert.assertThat(comment.number(), Matchers.is(num));
-    }
-
-    /**
-     * This tests that the remove() method is working fine.
-     * @throws Exception - in case something goes wrong.
-     */
-    @Test
-    public void removesComment() throws Exception {
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(HttpURLConnection.HTTP_NO_CONTENT, "")
-        ).start();
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("testing3", "issue3");
-        final RtComment comment = new RtComment(
-            new ApacheRequest(container.home()), issue, 10
-        );
-        try {
-            comment.remove();
-            final MkQuery query = container.take();
-            MatcherAssert.assertThat(
-                query.method(),
-                Matchers.equalTo(Request.DELETE)
-            );
-        } finally {
-            container.stop();
-        }
-    }
-
-    /**
-     * RtComment can return its JSon description.
-     * @throws Exception - if something goes wrong.
-     */
-    @Test
-    public void returnsItsJSon() throws Exception {
-        final String body = "{\"body\":\"test5\"}";
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(HttpURLConnection.HTTP_OK, body)
-        ).start();
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("testing4", "issue4");
-        final RtComment comment = new RtComment(
-            new ApacheRequest(container.home()), issue, 10
-        );
-        try {
-            final JsonObject json = comment.json();
-            MatcherAssert.assertThat(
-                json.getString("body"),
-                Matchers.is("test5")
-            );
-        } finally {
-            container.stop();
-        }
-    }
-
-    /**
-     * RtComment can patch a comment.
-     * @throws Exception - if anything goes wrong.
-     */
-    @Test
-    public void patchesComment() throws Exception {
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(HttpURLConnection.HTTP_OK, "")
-        ).start();
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("testing5", "issue5");
-        final RtComment comment = new RtComment(
-            new ApacheRequest(container.home()), issue, 10
-        );
-        final JsonObject jsonPatch = Json.createObjectBuilder()
-            .add("title", "test comment").build();
-        try {
-            comment.patch(jsonPatch);
-            final MkQuery query = container.take();
-            MatcherAssert.assertThat(
-                query.method(), Matchers.equalTo(Request.PATCH)
-            );
-        } finally {
-            container.stop();
-        }
-    }
-
-    /**
-     * This tests that the toString() method is working fine.
-     * @throws Exception - if anything goes wrong.
-     */
-    @Test
-    public void givesToString() throws Exception {
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(HttpURLConnection.HTTP_OK, "")
-        ).start();
-        final Repo repo = repo();
-        final Issue issue = repo.issues().create("testing6", "issue6");
-        final RtComment comment = new RtComment(
-            new ApacheRequest(container.home()), issue, 10
-        );
-        try {
-            final String stringComment = comment.toString();
-            MatcherAssert.assertThat(
-                stringComment, Matchers.not(Matchers.isEmptyOrNullString())
-            );
-            MatcherAssert.assertThat(stringComment, Matchers.endsWith("10"));
-        } finally {
-            container.stop();
-        }
-    }
-
-    /**
-     * This method returns a Repo for testing.
-     * @return Repo - a repo to be used for test.
-     * @throws Exception - if anything goes wrong.
-     */
-    private static Repo repo() throws Exception {
-        return new MkGithub().repos().create(
-            Json.createObjectBuilder().add("name", "test").build()
-        );
-    }
 }
diff --git a/src/test/java/com/jcabi/github/RtGistTest.java b/src/test/java/com/jcabi/github/RtGistTest.java
index b33e2003..6050152a 100644
--- a/src/test/java/com/jcabi/github/RtGistTest.java
+++ b/src/test/java/com/jcabi/github/RtGistTest.java
@@ -30,16 +30,15 @@
 package com.jcabi.github;
 
 import com.jcabi.github.mock.MkGithub;
-import com.rexsl.test.Request;
 import com.rexsl.test.mock.MkAnswer;
 import com.rexsl.test.mock.MkContainer;
 import com.rexsl.test.mock.MkGrizzlyContainer;
-import com.rexsl.test.mock.MkQuery;
 import com.rexsl.test.request.ApacheRequest;
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.Matchers;
+import org.junit.Ignore;
 import org.junit.Test;
 
 /**
@@ -220,25 +219,8 @@ public final class RtGistTest {
      * @throws Exception If something goes wrong.
      */
     @Test
+    @Ignore
     public void canUnstarAGist() throws Exception {
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(HttpURLConnection.HTTP_NO_CONTENT, "")
-        ).start();
-        final RtGist gist = new RtGist(
-            new MkGithub(),
-            new ApacheRequest(container.home()),
-            "unstar"
-        );
-        gist.unstar();
-        final MkQuery query = container.take();
-        MatcherAssert.assertThat(
-            query.method(),
-            Matchers.equalTo(Request.DELETE)
-        );
-        MatcherAssert.assertThat(
-            query.body(),
-            Matchers.isEmptyOrNullString()
-        );
-        container.stop();
+        //to implement
     }
 }
diff --git a/src/test/java/com/jcabi/github/mock/MkGistsTest.java b/src/test/java/com/jcabi/github/mock/MkGistsTest.java
index 3f2a11e3..1bb1b899 100644
--- a/src/test/java/com/jcabi/github/mock/MkGistsTest.java
+++ b/src/test/java/com/jcabi/github/mock/MkGistsTest.java
@@ -35,6 +35,7 @@ import java.io.IOException;
 import java.util.Collections;
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.Matchers;
+import org.junit.Ignore;
 import org.junit.Test;
 
 /**
@@ -65,21 +66,24 @@ public final class MkGistsTest {
     /**
      * This tests that the remove() method in MkGists is working fine.
      * @throws Exception - if anything goes wrong.
+     * @todo #20 Method remove() in MkGists class has to be implemented.
+     *  The test for this method is currently ignored.
      */
     @Test
-    public void removesGistByIdentifier() throws Exception {
+    @Ignore
+    public void removesMkGistByName() throws Exception {
         final Gists gists = new MkGithub().gists();
-        final Gist gist = gists.create(
+        final Gist createdGist = gists.create(
             Collections.singletonMap("fileName.txt", "content")
         );
         MatcherAssert.assertThat(
             gists.iterate(),
-            Matchers.hasItem(gist)
+            Matchers.hasItem(createdGist)
         );
-        gists.remove(gist.identifier());
+        gists.remove("gist");
         MatcherAssert.assertThat(
             gists.iterate(),
-            Matchers.not(Matchers.hasItem(gist))
+            Matchers.not(Matchers.hasItem(createdGist))
         );
     }
     /**
