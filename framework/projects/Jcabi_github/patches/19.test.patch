diff --git a/src/test/java/com/jcabi/github/LimitTest.java b/src/test/java/com/jcabi/github/LimitTest.java
index a3f476d9..37d8f197 100644
--- a/src/test/java/com/jcabi/github/LimitTest.java
+++ b/src/test/java/com/jcabi/github/LimitTest.java
@@ -30,7 +30,9 @@
 package com.jcabi.github;
 
 import com.jcabi.github.Limit.Throttled;
+
 import javax.json.Json;
+
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.Matchers;
 import org.junit.Test;
@@ -39,10 +41,10 @@ import org.mockito.Mockito;
 /**
  * Test case for {@link Limit}.
  *
- * @author Tomas Colombo (tomas.colombo@rollasolution.com)
+ * @author Tom√°s Colombo (tomas.colombo@rollasolution.com)
  * @version $Id$
  */
-public final class LimitTest {
+public class LimitTest {
 
     /**
      * Limit can throw exception when resource is absent.
@@ -50,17 +52,16 @@ public final class LimitTest {
      * @throws Exception if some problem inside
      */
     @Test(expected = IllegalStateException.class)
-    public void throwsWhenResourceIsAbsent() throws Exception {
-        final Limit limit = Mockito.mock(Limit.class);
-        final Throttled throttled = new Throttled(limit, 23);
-        Mockito.when(limit.json()).thenReturn(
-            Json.createObjectBuilder().add("absent", "absentValue").build()
-        );
+    public void throwsWhenResourceIsAbsent() throws Exception{
+        
+        Limit limit = Mockito.mock(Limit.class);
+        final Throttled throttled = new Throttled(limit,23);
+        Mockito.when(limit.json()).thenReturn(Json.createObjectBuilder().add("absent", "absentValue").build());
         throttled.json();
-        MatcherAssert.assertThat(
-            limit.json().toString(),
-            Matchers.equalTo("{}")
-        );
+            MatcherAssert.assertThat(
+                limit.json().toString(),
+                Matchers.equalTo("{}")
+            );
     }
 
 }
