diff --git a/src/main/java/org/apache/commons/collections4/set/CompositeSet.java b/src/main/java/org/apache/commons/collections4/set/CompositeSet.java
index 4ba73570..b8f93f80 100644
--- a/src/main/java/org/apache/commons/collections4/set/CompositeSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/CompositeSet.java
@@ -252,9 +252,6 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      */
     @Override
     public boolean containsAll(final Collection<?> coll) {
-        if (coll == null) {
-            return false;
-        }
         for (final Object item : coll) {
             if (contains(item) == false) {
                 return false;
@@ -294,7 +291,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      */
     @Override
     public boolean removeAll(final Collection<?> coll) {
-        if (CollectionUtils.isEmpty(coll)) {
+        if (coll.size() == 0) {
             return false;
         }
         boolean changed = false;
@@ -357,23 +354,21 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @see SetMutator
      */
     public synchronized void addComposited(final Set<E> set) {
-        if (set != null) {
-            for (final Set<E> existingSet : getSets()) {
-                final Collection<E> intersects = CollectionUtils.intersection(existingSet, set);
-                if (intersects.size() > 0) {
-                    if (this.mutator == null) {
-                        throw new UnsupportedOperationException(
-                                "Collision adding composited set with no SetMutator set");
-                    }
-                    getMutator().resolveCollision(this, existingSet, set, intersects);
-                    if (CollectionUtils.intersection(existingSet, set).size() > 0) {
-                        throw new IllegalArgumentException(
-                                "Attempt to add illegal entry unresolved by SetMutator.resolveCollision()");
-                    }
+        for (final Set<E> existingSet : getSets()) {
+            final Collection<E> intersects = CollectionUtils.intersection(existingSet, set);
+            if (intersects.size() > 0) {
+                if (this.mutator == null) {
+                    throw new UnsupportedOperationException(
+                        "Collision adding composited set with no SetMutator set");
+                }
+                getMutator().resolveCollision(this, existingSet, set, intersects);
+                if (CollectionUtils.intersection(existingSet, set).size() > 0) {
+                    throw new IllegalArgumentException(
+                        "Attempt to add illegal entry unresolved by SetMutator.resolveCollision()");
                 }
             }
-            all.add(set);
         }
+        all.add(set);
     }
 
     /**
@@ -393,10 +388,8 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param sets  the Sets to be appended to the composite
      */
     public void addComposited(final Set<E>... sets) {
-        if (sets != null) {
-            for (final Set<E> set : sets) {
-                addComposited(set);
-            }
+        for (final Set<E> set : sets) {
+            addComposited(set);
         }
     }
 
