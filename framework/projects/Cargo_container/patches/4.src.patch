diff --git a/core/api/container/src/main/java/org/codehaus/cargo/container/spi/deployer/AbstractLocalDeployer.java b/core/api/container/src/main/java/org/codehaus/cargo/container/spi/deployer/AbstractLocalDeployer.java
index eda0095c8..90746af61 100644
--- a/core/api/container/src/main/java/org/codehaus/cargo/container/spi/deployer/AbstractLocalDeployer.java
+++ b/core/api/container/src/main/java/org/codehaus/cargo/container/spi/deployer/AbstractLocalDeployer.java
@@ -20,7 +20,7 @@
 package org.codehaus.cargo.container.spi.deployer;
 
 import org.codehaus.cargo.container.LocalContainer;
-import org.codehaus.cargo.util.CargoException;
+import org.codehaus.cargo.util.DefaultFileHandler;
 import org.codehaus.cargo.util.FileHandler;
 
 /**
@@ -35,6 +35,11 @@ public abstract class AbstractLocalDeployer extends AbstractDeployer
      */
     private LocalContainer container;
 
+    /**
+     * File utility class.
+     */
+    private FileHandler fileHandler;
+
     /**
      * @param container the local installed container into which to perform deployment operations
      */
@@ -42,14 +47,7 @@ public abstract class AbstractLocalDeployer extends AbstractDeployer
     {
         super(container);
         this.container = container;
-
-        String configurationHome = container.getConfiguration().getHome();
-        if (!getFileHandler().isDirectory(configurationHome))
-        {
-            throw new CargoException("The container configuration directory \""
-                + configurationHome + "\" does not exist. Please configure the container before "
-                + "attempting to perform any local deployment.");
-        }
+        this.fileHandler = new DefaultFileHandler();
     }
 
     /**
@@ -65,6 +63,16 @@ public abstract class AbstractLocalDeployer extends AbstractDeployer
      */
     protected FileHandler getFileHandler()
     {
-        return container.getFileHandler();
+        return this.fileHandler;
+    }
+
+    /**
+     * @param fileHandler the Cargo file utility class to use. This method is useful for unit
+     * testing with Mock objects as it can be passed a test file handler that doesn't perform any
+     * real file action.
+     */
+    protected void setFileHandler(FileHandler fileHandler)
+    {
+        this.fileHandler = fileHandler;
     }
 }
